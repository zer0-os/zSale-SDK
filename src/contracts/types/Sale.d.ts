/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SaleInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "SALE_MANAGER()": FunctionFragment;
    "__Sale_init()": FunctionFragment;
    "configureSale(tuple,address)": FunctionFragment;
    "domainsPurchasedByAccountPerSale(uint256,address)": FunctionFragment;
    "domainsSold()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getSaleId(uint256,address,uint256)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "paused()": FunctionFragment;
    "purchaseDomainsPrivateSale(uint256,uint256,uint256,bytes32[])": FunctionFragment;
    "purchaseDomainsPublicSale(uint8)": FunctionFragment;
    "releaseDomain()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "saleConfiguration()": FunctionFragment;
    "saleCounter()": FunctionFragment;
    "saleId()": FunctionFragment;
    "salePhase()": FunctionFragment;
    "saleStartBlockTimestamp()": FunctionFragment;
    "setMintlistMerkleRoot(bytes32)": FunctionFragment;
    "setMintlistSaleDuration(uint256)": FunctionFragment;
    "setPauseStatus(bool)": FunctionFragment;
    "setPhase(uint8)": FunctionFragment;
    "setPrivateSalePrice(uint256)": FunctionFragment;
    "setPublicSaleLimit(uint256)": FunctionFragment;
    "setSalePrice(uint256)": FunctionFragment;
    "setSaleQuantity(uint256)": FunctionFragment;
    "setSellerWallet(address)": FunctionFragment;
    "startSale()": FunctionFragment;
    "stopSale()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "zNSRegistrar()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SALE_MANAGER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__Sale_init",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "configureSale",
    values: [
      {
        sellerWallet: string;
        parentDomainId: BigNumberish;
        salePrice: BigNumberish;
        privateSalePrice: BigNumberish;
        mintlistSaleDuration: BigNumberish;
        amountForSale: BigNumberish;
        mintlistMerkleRoot: BytesLike;
        startingMetadataIndex: BigNumberish;
        folderGroupID: BigNumberish;
        publicSaleLimit: BigNumberish;
      },
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "domainsPurchasedByAccountPerSale",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "domainsSold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSaleId",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purchaseDomainsPrivateSale",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseDomainsPublicSale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseDomain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "saleConfiguration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "saleCounter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "saleId", values?: undefined): string;
  encodeFunctionData(functionFragment: "salePhase", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "saleStartBlockTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMintlistMerkleRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintlistSaleDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPauseStatus",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPhase",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrivateSalePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPublicSaleLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSalePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSaleQuantity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSellerWallet",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "startSale", values?: undefined): string;
  encodeFunctionData(functionFragment: "stopSale", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "zNSRegistrar",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SALE_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__Sale_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainsPurchasedByAccountPerSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainsSold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSaleId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseDomainsPrivateSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseDomainsPublicSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "saleConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "saleCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "saleId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "salePhase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "saleStartBlockTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintlistMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintlistSaleDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPauseStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPhase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPrivateSalePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPublicSaleLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSalePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSaleQuantity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSellerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startSale", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stopSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zNSRegistrar",
    data: BytesLike
  ): Result;

  events: {
    "DomainsPurchased(uint256,address,uint256,uint256,uint256)": EventFragment;
    "MintlistMerkleRootChanegd(uint256,bytes32)": EventFragment;
    "MintlistSaleDurationChanged(uint256,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "PriceChanged(uint256,uint256)": EventFragment;
    "PrivatePriceChanged(uint256,uint256)": EventFragment;
    "PublicSaleLimitChanged(uint256,uint256)": EventFragment;
    "RefundedEther(address,uint256,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SaleConfigured(uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,uint256,bytes32,address)": EventFragment;
    "SaleQuantityChanged(uint256,uint256)": EventFragment;
    "SaleStarted(uint256,uint256,uint256)": EventFragment;
    "SaleStopped(uint256,uint256,uint256)": EventFragment;
    "SellerWalletChanged(uint256,address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DomainsPurchased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintlistMerkleRootChanegd"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MintlistSaleDurationChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PrivatePriceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PublicSaleLimitChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RefundedEther"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SaleConfigured"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SaleQuantityChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SaleStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SaleStopped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellerWalletChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export class Sale extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SaleInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    SALE_MANAGER(overrides?: CallOverrides): Promise<[string]>;

    __Sale_init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    configureSale(
      config_: {
        sellerWallet: string;
        parentDomainId: BigNumberish;
        salePrice: BigNumberish;
        privateSalePrice: BigNumberish;
        mintlistSaleDuration: BigNumberish;
        amountForSale: BigNumberish;
        mintlistMerkleRoot: BytesLike;
        startingMetadataIndex: BigNumberish;
        folderGroupID: BigNumberish;
        publicSaleLimit: BigNumberish;
      },
      zNSRegistrar_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    domainsPurchasedByAccountPerSale(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    domainsSold(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getSaleId(
      parentDomainId_: BigNumberish,
      zNSRegistrar_: string,
      saleCounter_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    purchaseDomainsPrivateSale(
      count: BigNumberish,
      index: BigNumberish,
      purchaseLimit: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    purchaseDomainsPublicSale(
      count: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    releaseDomain(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    saleConfiguration(overrides?: CallOverrides): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        sellerWallet: string;
        parentDomainId: BigNumber;
        salePrice: BigNumber;
        privateSalePrice: BigNumber;
        mintlistSaleDuration: BigNumber;
        amountForSale: BigNumber;
        mintlistMerkleRoot: string;
        startingMetadataIndex: BigNumber;
        folderGroupID: BigNumber;
        publicSaleLimit: BigNumber;
      }
    >;

    saleCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    saleId(overrides?: CallOverrides): Promise<[BigNumber]>;

    salePhase(overrides?: CallOverrides): Promise<[number]>;

    saleStartBlockTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    setMintlistMerkleRoot(
      mintlistMerkleRoot_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMintlistSaleDuration(
      mintlistSaleDuration_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPauseStatus(
      pauseStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPhase(
      _phase: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPrivateSalePrice(
      price_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPublicSaleLimit(
      limit_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSalePrice(
      price_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSaleQuantity(
      amountForSale_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSellerWallet(
      wallet_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stopSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    zNSRegistrar(overrides?: CallOverrides): Promise<[string]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  SALE_MANAGER(overrides?: CallOverrides): Promise<string>;

  __Sale_init(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  configureSale(
    config_: {
      sellerWallet: string;
      parentDomainId: BigNumberish;
      salePrice: BigNumberish;
      privateSalePrice: BigNumberish;
      mintlistSaleDuration: BigNumberish;
      amountForSale: BigNumberish;
      mintlistMerkleRoot: BytesLike;
      startingMetadataIndex: BigNumberish;
      folderGroupID: BigNumberish;
      publicSaleLimit: BigNumberish;
    },
    zNSRegistrar_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  domainsPurchasedByAccountPerSale(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  domainsSold(overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getSaleId(
    parentDomainId_: BigNumberish,
    zNSRegistrar_: string,
    saleCounter_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  purchaseDomainsPrivateSale(
    count: BigNumberish,
    index: BigNumberish,
    purchaseLimit: BigNumberish,
    merkleProof: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  purchaseDomainsPublicSale(
    count: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  releaseDomain(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  saleConfiguration(overrides?: CallOverrides): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      sellerWallet: string;
      parentDomainId: BigNumber;
      salePrice: BigNumber;
      privateSalePrice: BigNumber;
      mintlistSaleDuration: BigNumber;
      amountForSale: BigNumber;
      mintlistMerkleRoot: string;
      startingMetadataIndex: BigNumber;
      folderGroupID: BigNumber;
      publicSaleLimit: BigNumber;
    }
  >;

  saleCounter(overrides?: CallOverrides): Promise<BigNumber>;

  saleId(overrides?: CallOverrides): Promise<BigNumber>;

  salePhase(overrides?: CallOverrides): Promise<number>;

  saleStartBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  setMintlistMerkleRoot(
    mintlistMerkleRoot_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMintlistSaleDuration(
    mintlistSaleDuration_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPauseStatus(
    pauseStatus: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPhase(
    _phase: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPrivateSalePrice(
    price_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPublicSaleLimit(
    limit_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSalePrice(
    price_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSaleQuantity(
    amountForSale_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSellerWallet(
    wallet_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startSale(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stopSale(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  zNSRegistrar(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    SALE_MANAGER(overrides?: CallOverrides): Promise<string>;

    __Sale_init(overrides?: CallOverrides): Promise<void>;

    configureSale(
      config_: {
        sellerWallet: string;
        parentDomainId: BigNumberish;
        salePrice: BigNumberish;
        privateSalePrice: BigNumberish;
        mintlistSaleDuration: BigNumberish;
        amountForSale: BigNumberish;
        mintlistMerkleRoot: BytesLike;
        startingMetadataIndex: BigNumberish;
        folderGroupID: BigNumberish;
        publicSaleLimit: BigNumberish;
      },
      zNSRegistrar_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    domainsPurchasedByAccountPerSale(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    domainsSold(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getSaleId(
      parentDomainId_: BigNumberish,
      zNSRegistrar_: string,
      saleCounter_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    purchaseDomainsPrivateSale(
      count: BigNumberish,
      index: BigNumberish,
      purchaseLimit: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    purchaseDomainsPublicSale(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    releaseDomain(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    saleConfiguration(overrides?: CallOverrides): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        sellerWallet: string;
        parentDomainId: BigNumber;
        salePrice: BigNumber;
        privateSalePrice: BigNumber;
        mintlistSaleDuration: BigNumber;
        amountForSale: BigNumber;
        mintlistMerkleRoot: string;
        startingMetadataIndex: BigNumber;
        folderGroupID: BigNumber;
        publicSaleLimit: BigNumber;
      }
    >;

    saleCounter(overrides?: CallOverrides): Promise<BigNumber>;

    saleId(overrides?: CallOverrides): Promise<BigNumber>;

    salePhase(overrides?: CallOverrides): Promise<number>;

    saleStartBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    setMintlistMerkleRoot(
      mintlistMerkleRoot_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setMintlistSaleDuration(
      mintlistSaleDuration_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPauseStatus(
      pauseStatus: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setPhase(_phase: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setPrivateSalePrice(
      price_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPublicSaleLimit(
      limit_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSalePrice(
      price_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSaleQuantity(
      amountForSale_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSellerWallet(wallet_: string, overrides?: CallOverrides): Promise<void>;

    startSale(overrides?: CallOverrides): Promise<void>;

    stopSale(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    zNSRegistrar(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    DomainsPurchased(
      saleId?: BigNumberish | null,
      buyer?: null,
      parentDomainId?: null,
      salePrice?: null,
      quantity?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber, BigNumber],
      {
        saleId: BigNumber;
        buyer: string;
        parentDomainId: BigNumber;
        salePrice: BigNumber;
        quantity: BigNumber;
      }
    >;

    MintlistMerkleRootChanegd(
      saleId?: BigNumberish | null,
      mintlistMerkleRoot?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { saleId: BigNumber; mintlistMerkleRoot: string }
    >;

    MintlistSaleDurationChanged(
      saleId?: BigNumberish | null,
      mintlistSaleDuration?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { saleId: BigNumber; mintlistSaleDuration: BigNumber }
    >;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    PriceChanged(
      saleId?: BigNumberish | null,
      salePrice?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { saleId: BigNumber; salePrice: BigNumber }
    >;

    PrivatePriceChanged(
      saleId?: BigNumberish | null,
      salePrice?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { saleId: BigNumber; salePrice: BigNumber }
    >;

    PublicSaleLimitChanged(
      saleId?: BigNumberish | null,
      publicSaleLimit?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { saleId: BigNumber; publicSaleLimit: BigNumber }
    >;

    RefundedEther(
      buyer?: null,
      amount?: null,
      saleId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { buyer: string; amount: BigNumber; saleId: BigNumber }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    SaleConfigured(
      saleId?: BigNumberish | null,
      parentDomainId?: BigNumberish | null,
      salePrice?: null,
      privateSalePrice?: null,
      sellerWallet?: null,
      amountForSale?: null,
      mintlistSaleDuration?: null,
      startingMetadataIndex?: null,
      folderGroupID?: null,
      publicSaleLimit?: null,
      mintlistMerkleRoot?: null,
      zNSRegistrar?: null
    ): TypedEventFilter<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string
      ],
      {
        saleId: BigNumber;
        parentDomainId: BigNumber;
        salePrice: BigNumber;
        privateSalePrice: BigNumber;
        sellerWallet: string;
        amountForSale: BigNumber;
        mintlistSaleDuration: BigNumber;
        startingMetadataIndex: BigNumber;
        folderGroupID: BigNumber;
        publicSaleLimit: BigNumber;
        mintlistMerkleRoot: string;
        zNSRegistrar: string;
      }
    >;

    SaleQuantityChanged(
      saleId?: BigNumberish | null,
      amountForSale?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { saleId: BigNumber; amountForSale: BigNumber }
    >;

    SaleStarted(
      saleId?: BigNumberish | null,
      parentDomainId?: BigNumberish | null,
      startingPhase?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { saleId: BigNumber; parentDomainId: BigNumber; startingPhase: BigNumber }
    >;

    SaleStopped(
      saleId?: BigNumberish | null,
      parentDomainId?: BigNumberish | null,
      remainingDomains?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      {
        saleId: BigNumber;
        parentDomainId: BigNumber;
        remainingDomains: BigNumber;
      }
    >;

    SellerWalletChanged(
      saleId?: BigNumberish | null,
      seller?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { saleId: BigNumber; seller: string }
    >;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    SALE_MANAGER(overrides?: CallOverrides): Promise<BigNumber>;

    __Sale_init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    configureSale(
      config_: {
        sellerWallet: string;
        parentDomainId: BigNumberish;
        salePrice: BigNumberish;
        privateSalePrice: BigNumberish;
        mintlistSaleDuration: BigNumberish;
        amountForSale: BigNumberish;
        mintlistMerkleRoot: BytesLike;
        startingMetadataIndex: BigNumberish;
        folderGroupID: BigNumberish;
        publicSaleLimit: BigNumberish;
      },
      zNSRegistrar_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    domainsPurchasedByAccountPerSale(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    domainsSold(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSaleId(
      parentDomainId_: BigNumberish,
      zNSRegistrar_: string,
      saleCounter_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseDomainsPrivateSale(
      count: BigNumberish,
      index: BigNumberish,
      purchaseLimit: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    purchaseDomainsPublicSale(
      count: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    releaseDomain(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    saleConfiguration(overrides?: CallOverrides): Promise<BigNumber>;

    saleCounter(overrides?: CallOverrides): Promise<BigNumber>;

    saleId(overrides?: CallOverrides): Promise<BigNumber>;

    salePhase(overrides?: CallOverrides): Promise<BigNumber>;

    saleStartBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    setMintlistMerkleRoot(
      mintlistMerkleRoot_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMintlistSaleDuration(
      mintlistSaleDuration_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPauseStatus(
      pauseStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPhase(
      _phase: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPrivateSalePrice(
      price_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPublicSaleLimit(
      limit_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSalePrice(
      price_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSaleQuantity(
      amountForSale_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSellerWallet(
      wallet_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stopSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    zNSRegistrar(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SALE_MANAGER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __Sale_init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    configureSale(
      config_: {
        sellerWallet: string;
        parentDomainId: BigNumberish;
        salePrice: BigNumberish;
        privateSalePrice: BigNumberish;
        mintlistSaleDuration: BigNumberish;
        amountForSale: BigNumberish;
        mintlistMerkleRoot: BytesLike;
        startingMetadataIndex: BigNumberish;
        folderGroupID: BigNumberish;
        publicSaleLimit: BigNumberish;
      },
      zNSRegistrar_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    domainsPurchasedByAccountPerSale(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    domainsSold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSaleId(
      parentDomainId_: BigNumberish,
      zNSRegistrar_: string,
      saleCounter_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchaseDomainsPrivateSale(
      count: BigNumberish,
      index: BigNumberish,
      purchaseLimit: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    purchaseDomainsPublicSale(
      count: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    releaseDomain(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    saleConfiguration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    saleCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    saleId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    salePhase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    saleStartBlockTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setMintlistMerkleRoot(
      mintlistMerkleRoot_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMintlistSaleDuration(
      mintlistSaleDuration_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPauseStatus(
      pauseStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPhase(
      _phase: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPrivateSalePrice(
      price_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPublicSaleLimit(
      limit_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSalePrice(
      price_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSaleQuantity(
      amountForSale_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSellerWallet(
      wallet_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stopSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    zNSRegistrar(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
