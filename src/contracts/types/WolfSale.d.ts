/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface WolfSaleInterface extends ethers.utils.Interface {
  functions: {
    "__WolfSale_init(uint256,address,address,uint256,uint256,uint256,bytes32,address)": FunctionFragment;
    "domainsPurchasedByAccount(address)": FunctionFragment;
    "domainsSold()": FunctionFragment;
    "getIDByIndex(uint256)": FunctionFragment;
    "holderWallet()": FunctionFragment;
    "numberForSaleForCurrentPhase()": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "privateSaleDuration()": FunctionFragment;
    "privateSaleMerkleRoot()": FunctionFragment;
    "privateSaleQuantity()": FunctionFragment;
    "publicSaleQuantity()": FunctionFragment;
    "purchaseDomains(uint8,uint256,uint256,bytes32[])": FunctionFragment;
    "purchaseDomainsPublicSale(uint8)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "salePrice()": FunctionFragment;
    "saleStartBlock()": FunctionFragment;
    "saleStarted()": FunctionFragment;
    "sellerWallet()": FunctionFragment;
    "setHolderWallet(address)": FunctionFragment;
    "setMerkleRoot(bytes32)": FunctionFragment;
    "setPauseStatus(bool)": FunctionFragment;
    "setSaleDuration(uint256)": FunctionFragment;
    "setSalePrice(uint256)": FunctionFragment;
    "setSaleQuantities(uint256,uint256)": FunctionFragment;
    "setSellerWallet(address)": FunctionFragment;
    "startSale()": FunctionFragment;
    "stopSale()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "zNSRegistrar()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "__WolfSale_init",
    values: [
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "domainsPurchasedByAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "domainsSold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIDByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "holderWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberForSaleForCurrentPhase",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "privateSaleDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "privateSaleMerkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "privateSaleQuantity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publicSaleQuantity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseDomains",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseDomainsPublicSale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "salePrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "saleStartBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "saleStarted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellerWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setHolderWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMerkleRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPauseStatus",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSaleDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSalePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSaleQuantities",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSellerWallet",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "startSale", values?: undefined): string;
  encodeFunctionData(functionFragment: "stopSale", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "zNSRegistrar",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "__WolfSale_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainsPurchasedByAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainsSold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIDByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "holderWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberForSaleForCurrentPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "privateSaleDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "privateSaleMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "privateSaleQuantity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicSaleQuantity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseDomains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseDomainsPublicSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "salePrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "saleStartBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "saleStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHolderWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPauseStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSaleDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSalePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSaleQuantities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSellerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startSale", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stopSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zNSRegistrar",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "RefundedEther(address,uint256)": EventFragment;
    "SaleStarted(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RefundedEther"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SaleStarted"): EventFragment;
}

export class WolfSale extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: WolfSaleInterface;

  functions: {
    __WolfSale_init(
      price_: BigNumberish,
      zNSRegistrar_: string,
      sellerWallet_: string,
      privateSaleDuration_: BigNumberish,
      privateSaleQuantity_: BigNumberish,
      publicSaleQuantity_: BigNumberish,
      merkleRoot_: BytesLike,
      holderWallet_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    domainsPurchasedByAccount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    domainsSold(overrides?: CallOverrides): Promise<[BigNumber]>;

    getIDByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    holderWallet(overrides?: CallOverrides): Promise<[string]>;

    numberForSaleForCurrentPhase(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    privateSaleDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    privateSaleMerkleRoot(overrides?: CallOverrides): Promise<[string]>;

    privateSaleQuantity(overrides?: CallOverrides): Promise<[BigNumber]>;

    publicSaleQuantity(overrides?: CallOverrides): Promise<[BigNumber]>;

    purchaseDomains(
      count: BigNumberish,
      index: BigNumberish,
      purchaseLimit: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    purchaseDomainsPublicSale(
      count: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    salePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    saleStartBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    saleStarted(overrides?: CallOverrides): Promise<[boolean]>;

    sellerWallet(overrides?: CallOverrides): Promise<[string]>;

    setHolderWallet(
      wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMerkleRoot(
      root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPauseStatus(
      pauseStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSaleDuration(
      durationInBlocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSalePrice(
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSaleQuantities(
      privateSale: BigNumberish,
      publicSale: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSellerWallet(
      wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stopSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    zNSRegistrar(overrides?: CallOverrides): Promise<[string]>;
  };

  __WolfSale_init(
    price_: BigNumberish,
    zNSRegistrar_: string,
    sellerWallet_: string,
    privateSaleDuration_: BigNumberish,
    privateSaleQuantity_: BigNumberish,
    publicSaleQuantity_: BigNumberish,
    merkleRoot_: BytesLike,
    holderWallet_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  domainsPurchasedByAccount(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  domainsSold(overrides?: CallOverrides): Promise<BigNumber>;

  getIDByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  holderWallet(overrides?: CallOverrides): Promise<string>;

  numberForSaleForCurrentPhase(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  privateSaleDuration(overrides?: CallOverrides): Promise<BigNumber>;

  privateSaleMerkleRoot(overrides?: CallOverrides): Promise<string>;

  privateSaleQuantity(overrides?: CallOverrides): Promise<BigNumber>;

  publicSaleQuantity(overrides?: CallOverrides): Promise<BigNumber>;

  purchaseDomains(
    count: BigNumberish,
    index: BigNumberish,
    purchaseLimit: BigNumberish,
    merkleProof: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  purchaseDomainsPublicSale(
    count: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  salePrice(overrides?: CallOverrides): Promise<BigNumber>;

  saleStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

  saleStarted(overrides?: CallOverrides): Promise<boolean>;

  sellerWallet(overrides?: CallOverrides): Promise<string>;

  setHolderWallet(
    wallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMerkleRoot(
    root: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPauseStatus(
    pauseStatus: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSaleDuration(
    durationInBlocks: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSalePrice(
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSaleQuantities(
    privateSale: BigNumberish,
    publicSale: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSellerWallet(
    wallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startSale(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stopSale(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  zNSRegistrar(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    __WolfSale_init(
      price_: BigNumberish,
      zNSRegistrar_: string,
      sellerWallet_: string,
      privateSaleDuration_: BigNumberish,
      privateSaleQuantity_: BigNumberish,
      publicSaleQuantity_: BigNumberish,
      merkleRoot_: BytesLike,
      holderWallet_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    domainsPurchasedByAccount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    domainsSold(overrides?: CallOverrides): Promise<BigNumber>;

    getIDByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    holderWallet(overrides?: CallOverrides): Promise<string>;

    numberForSaleForCurrentPhase(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    privateSaleDuration(overrides?: CallOverrides): Promise<BigNumber>;

    privateSaleMerkleRoot(overrides?: CallOverrides): Promise<string>;

    privateSaleQuantity(overrides?: CallOverrides): Promise<BigNumber>;

    publicSaleQuantity(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseDomains(
      count: BigNumberish,
      index: BigNumberish,
      purchaseLimit: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    purchaseDomainsPublicSale(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    salePrice(overrides?: CallOverrides): Promise<BigNumber>;

    saleStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

    saleStarted(overrides?: CallOverrides): Promise<boolean>;

    sellerWallet(overrides?: CallOverrides): Promise<string>;

    setHolderWallet(wallet: string, overrides?: CallOverrides): Promise<void>;

    setMerkleRoot(root: BytesLike, overrides?: CallOverrides): Promise<void>;

    setPauseStatus(
      pauseStatus: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setSaleDuration(
      durationInBlocks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSalePrice(price: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setSaleQuantities(
      privateSale: BigNumberish,
      publicSale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSellerWallet(wallet: string, overrides?: CallOverrides): Promise<void>;

    startSale(overrides?: CallOverrides): Promise<void>;

    stopSale(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    zNSRegistrar(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    RefundedEther(
      buyer?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { buyer: string; amount: BigNumber }
    >;

    SaleStarted(
      block?: null
    ): TypedEventFilter<[BigNumber], { block: BigNumber }>;
  };

  estimateGas: {
    __WolfSale_init(
      price_: BigNumberish,
      zNSRegistrar_: string,
      sellerWallet_: string,
      privateSaleDuration_: BigNumberish,
      privateSaleQuantity_: BigNumberish,
      publicSaleQuantity_: BigNumberish,
      merkleRoot_: BytesLike,
      holderWallet_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    domainsPurchasedByAccount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    domainsSold(overrides?: CallOverrides): Promise<BigNumber>;

    getIDByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    holderWallet(overrides?: CallOverrides): Promise<BigNumber>;

    numberForSaleForCurrentPhase(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    privateSaleDuration(overrides?: CallOverrides): Promise<BigNumber>;

    privateSaleMerkleRoot(overrides?: CallOverrides): Promise<BigNumber>;

    privateSaleQuantity(overrides?: CallOverrides): Promise<BigNumber>;

    publicSaleQuantity(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseDomains(
      count: BigNumberish,
      index: BigNumberish,
      purchaseLimit: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    purchaseDomainsPublicSale(
      count: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    salePrice(overrides?: CallOverrides): Promise<BigNumber>;

    saleStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

    saleStarted(overrides?: CallOverrides): Promise<BigNumber>;

    sellerWallet(overrides?: CallOverrides): Promise<BigNumber>;

    setHolderWallet(
      wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMerkleRoot(
      root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPauseStatus(
      pauseStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSaleDuration(
      durationInBlocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSalePrice(
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSaleQuantities(
      privateSale: BigNumberish,
      publicSale: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSellerWallet(
      wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stopSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    zNSRegistrar(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    __WolfSale_init(
      price_: BigNumberish,
      zNSRegistrar_: string,
      sellerWallet_: string,
      privateSaleDuration_: BigNumberish,
      privateSaleQuantity_: BigNumberish,
      publicSaleQuantity_: BigNumberish,
      merkleRoot_: BytesLike,
      holderWallet_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    domainsPurchasedByAccount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    domainsSold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIDByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    holderWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numberForSaleForCurrentPhase(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    privateSaleDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    privateSaleMerkleRoot(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    privateSaleQuantity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publicSaleQuantity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    purchaseDomains(
      count: BigNumberish,
      index: BigNumberish,
      purchaseLimit: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    purchaseDomainsPublicSale(
      count: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    salePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    saleStartBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    saleStarted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellerWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setHolderWallet(
      wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMerkleRoot(
      root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPauseStatus(
      pauseStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSaleDuration(
      durationInBlocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSalePrice(
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSaleQuantities(
      privateSale: BigNumberish,
      publicSale: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSellerWallet(
      wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stopSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    zNSRegistrar(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
