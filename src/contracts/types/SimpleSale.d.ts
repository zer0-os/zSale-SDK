/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SimpleSaleInterface extends ethers.utils.Interface {
  functions: {
    "__SimpleSale_init(address,uint256,uint256,uint256,address,address,uint256,address)": FunctionFragment;
    "addDomainsToSell(string[])": FunctionFragment;
    "addDomainsToSellOptimized(bytes12[],bytes32[])": FunctionFragment;
    "controller()": FunctionFragment;
    "domainsForSale(uint256)": FunctionFragment;
    "domainsPurchasedByAccount(address)": FunctionFragment;
    "domainsSold()": FunctionFragment;
    "maxPurchasesPerAccount()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "parentDomainId()": FunctionFragment;
    "purchaseDomains(uint8)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "salePrice()": FunctionFragment;
    "saleToken()": FunctionFragment;
    "sellerWallet()": FunctionFragment;
    "setController(address)": FunctionFragment;
    "setParentDomainId(uint256)": FunctionFragment;
    "setSellerWallet(address)": FunctionFragment;
    "setStartIndex(uint256)": FunctionFragment;
    "startIndex()": FunctionFragment;
    "totalForSale()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "zNSRegistrar()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "__SimpleSale_init",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addDomainsToSell",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addDomainsToSellOptimized",
    values: [BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "domainsForSale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "domainsPurchasedByAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "domainsSold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxPurchasesPerAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "parentDomainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseDomains",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "salePrice", values?: undefined): string;
  encodeFunctionData(functionFragment: "saleToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sellerWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setParentDomainId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSellerWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setStartIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalForSale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "zNSRegistrar",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "__SimpleSale_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addDomainsToSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addDomainsToSellOptimized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "domainsForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainsPurchasedByAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainsSold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPurchasesPerAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "parentDomainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseDomains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "salePrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "saleToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sellerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setParentDomainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSellerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStartIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zNSRegistrar",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class SimpleSale extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SimpleSaleInterface;

  functions: {
    __SimpleSale_init(
      controller_: string,
      parentDomainId_: BigNumberish,
      price: BigNumberish,
      maxPurchasesPerAccount_: BigNumberish,
      zNSRegistrar_: string,
      sellerWallet_: string,
      startIndex_: BigNumberish,
      saleToken_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addDomainsToSell(
      metadataUris: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addDomainsToSellOptimized(
      chunk1: BytesLike[],
      chunk2: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    domainsForSale(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { metadataUri: string }>;

    domainsPurchasedByAccount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    domainsSold(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxPurchasesPerAccount(overrides?: CallOverrides): Promise<[BigNumber]>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    parentDomainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    purchaseDomains(
      count: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    salePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    saleToken(overrides?: CallOverrides): Promise<[string]>;

    sellerWallet(overrides?: CallOverrides): Promise<[string]>;

    setController(
      controller_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setParentDomainId(
      parentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSellerWallet(
      wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStartIndex(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalForSale(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    zNSRegistrar(overrides?: CallOverrides): Promise<[string]>;
  };

  __SimpleSale_init(
    controller_: string,
    parentDomainId_: BigNumberish,
    price: BigNumberish,
    maxPurchasesPerAccount_: BigNumberish,
    zNSRegistrar_: string,
    sellerWallet_: string,
    startIndex_: BigNumberish,
    saleToken_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addDomainsToSell(
    metadataUris: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addDomainsToSellOptimized(
    chunk1: BytesLike[],
    chunk2: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  controller(overrides?: CallOverrides): Promise<string>;

  domainsForSale(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  domainsPurchasedByAccount(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  domainsSold(overrides?: CallOverrides): Promise<BigNumber>;

  maxPurchasesPerAccount(overrides?: CallOverrides): Promise<BigNumber>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  parentDomainId(overrides?: CallOverrides): Promise<BigNumber>;

  purchaseDomains(
    count: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  salePrice(overrides?: CallOverrides): Promise<BigNumber>;

  saleToken(overrides?: CallOverrides): Promise<string>;

  sellerWallet(overrides?: CallOverrides): Promise<string>;

  setController(
    controller_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setParentDomainId(
    parentId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSellerWallet(
    wallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStartIndex(
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startIndex(overrides?: CallOverrides): Promise<BigNumber>;

  totalForSale(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  zNSRegistrar(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    __SimpleSale_init(
      controller_: string,
      parentDomainId_: BigNumberish,
      price: BigNumberish,
      maxPurchasesPerAccount_: BigNumberish,
      zNSRegistrar_: string,
      sellerWallet_: string,
      startIndex_: BigNumberish,
      saleToken_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addDomainsToSell(
      metadataUris: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    addDomainsToSellOptimized(
      chunk1: BytesLike[],
      chunk2: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    controller(overrides?: CallOverrides): Promise<string>;

    domainsForSale(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    domainsPurchasedByAccount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    domainsSold(overrides?: CallOverrides): Promise<BigNumber>;

    maxPurchasesPerAccount(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    parentDomainId(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseDomains(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    salePrice(overrides?: CallOverrides): Promise<BigNumber>;

    saleToken(overrides?: CallOverrides): Promise<string>;

    sellerWallet(overrides?: CallOverrides): Promise<string>;

    setController(
      controller_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setParentDomainId(
      parentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSellerWallet(wallet: string, overrides?: CallOverrides): Promise<void>;

    setStartIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startIndex(overrides?: CallOverrides): Promise<BigNumber>;

    totalForSale(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    zNSRegistrar(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    __SimpleSale_init(
      controller_: string,
      parentDomainId_: BigNumberish,
      price: BigNumberish,
      maxPurchasesPerAccount_: BigNumberish,
      zNSRegistrar_: string,
      sellerWallet_: string,
      startIndex_: BigNumberish,
      saleToken_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addDomainsToSell(
      metadataUris: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addDomainsToSellOptimized(
      chunk1: BytesLike[],
      chunk2: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    domainsForSale(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    domainsPurchasedByAccount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    domainsSold(overrides?: CallOverrides): Promise<BigNumber>;

    maxPurchasesPerAccount(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    parentDomainId(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseDomains(
      count: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    salePrice(overrides?: CallOverrides): Promise<BigNumber>;

    saleToken(overrides?: CallOverrides): Promise<BigNumber>;

    sellerWallet(overrides?: CallOverrides): Promise<BigNumber>;

    setController(
      controller_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setParentDomainId(
      parentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSellerWallet(
      wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStartIndex(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startIndex(overrides?: CallOverrides): Promise<BigNumber>;

    totalForSale(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    zNSRegistrar(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    __SimpleSale_init(
      controller_: string,
      parentDomainId_: BigNumberish,
      price: BigNumberish,
      maxPurchasesPerAccount_: BigNumberish,
      zNSRegistrar_: string,
      sellerWallet_: string,
      startIndex_: BigNumberish,
      saleToken_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addDomainsToSell(
      metadataUris: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addDomainsToSellOptimized(
      chunk1: BytesLike[],
      chunk2: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    domainsForSale(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    domainsPurchasedByAccount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    domainsSold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxPurchasesPerAccount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parentDomainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchaseDomains(
      count: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    salePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    saleToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellerWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setController(
      controller_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setParentDomainId(
      parentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSellerWallet(
      wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStartIndex(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalForSale(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    zNSRegistrar(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
