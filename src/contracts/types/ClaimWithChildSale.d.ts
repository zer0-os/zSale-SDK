/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ClaimWithChildSaleInterface extends ethers.utils.Interface {
  functions: {
    "__ClaimWithChildSale_init(uint256,uint256,address,address,uint256,uint256,string,uint256,address)": FunctionFragment;
    "baseFolderHash()": FunctionFragment;
    "claimDomains(uint256[])": FunctionFragment;
    "claimingParentId()": FunctionFragment;
    "domainsClaimedWithBy(uint256)": FunctionFragment;
    "domainsSold()": FunctionFragment;
    "getNftByIndex(uint256)": FunctionFragment;
    "newDomainParentId()": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "registrarOfClaimDomain()": FunctionFragment;
    "releaseDomain()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "saleDuration()": FunctionFragment;
    "salePrice()": FunctionFragment;
    "saleStartBlock()": FunctionFragment;
    "saleStarted()": FunctionFragment;
    "sellerWallet()": FunctionFragment;
    "setAmountOfDomainsForSale(uint256)": FunctionFragment;
    "setBaseFolderHash(string)": FunctionFragment;
    "setClaimingParentId(uint256)": FunctionFragment;
    "setHub(address)": FunctionFragment;
    "setNewDomainParentId(uint256)": FunctionFragment;
    "setPauseStatus(bool)": FunctionFragment;
    "setSaleDuration(uint256)": FunctionFragment;
    "setSalePrice(uint256)": FunctionFragment;
    "setSellerWallet(address)": FunctionFragment;
    "setStartIndex(uint256)": FunctionFragment;
    "setregistrarOfClaimDomain(address)": FunctionFragment;
    "startSale()": FunctionFragment;
    "startingMetadataIndex()": FunctionFragment;
    "stopSale()": FunctionFragment;
    "totalForSale()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "zNSHub()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "__ClaimWithChildSale_init",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "baseFolderHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimDomains",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimingParentId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "domainsClaimedWithBy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "domainsSold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNftByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "newDomainParentId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registrarOfClaimDomain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releaseDomain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "saleDuration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "salePrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "saleStartBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "saleStarted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellerWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAmountOfDomainsForSale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseFolderHash",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimingParentId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setHub", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setNewDomainParentId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPauseStatus",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSaleDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSalePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSellerWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setStartIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setregistrarOfClaimDomain",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "startSale", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "startingMetadataIndex",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stopSale", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalForSale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "zNSHub", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "__ClaimWithChildSale_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseFolderHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimDomains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimingParentId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainsClaimedWithBy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainsSold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNftByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newDomainParentId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registrarOfClaimDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "saleDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "salePrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "saleStartBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "saleStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAmountOfDomainsForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseFolderHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClaimingParentId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setHub", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNewDomainParentId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPauseStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSaleDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSalePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSellerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStartIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setregistrarOfClaimDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startingMetadataIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stopSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zNSHub", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "RefundedEther(address,uint256)": EventFragment;
    "SaleStarted(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RefundedEther"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SaleStarted"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type RefundedEtherEvent = TypedEvent<
  [string, BigNumber] & { buyer: string; amount: BigNumber }
>;

export type SaleStartedEvent = TypedEvent<[BigNumber] & { block: BigNumber }>;

export class ClaimWithChildSale extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ClaimWithChildSaleInterface;

  functions: {
    __ClaimWithChildSale_init(
      newDomainParentId_: BigNumberish,
      price_: BigNumberish,
      zNSHub_: string,
      sellerWallet_: string,
      saleDuration_: BigNumberish,
      startingMetadataIndex_: BigNumberish,
      baseFolderHash_: string,
      totalForSale_: BigNumberish,
      registrarOfClaimDomain_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    baseFolderHash(overrides?: CallOverrides): Promise<[string]>;

    claimDomains(
      claimingIds: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimingParentId(overrides?: CallOverrides): Promise<[BigNumber]>;

    domainsClaimedWithBy(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    domainsSold(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNftByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    newDomainParentId(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    registrarOfClaimDomain(overrides?: CallOverrides): Promise<[string]>;

    releaseDomain(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    saleDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    salePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    saleStartBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    saleStarted(overrides?: CallOverrides): Promise<[boolean]>;

    sellerWallet(overrides?: CallOverrides): Promise<[string]>;

    setAmountOfDomainsForSale(
      forSale: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseFolderHash(
      folderHash_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setClaimingParentId(
      parentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHub(
      zNSHub_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNewDomainParentId(
      parentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPauseStatus(
      pauseStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSaleDuration(
      durationInBlocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSalePrice(
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSellerWallet(
      wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStartIndex(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setregistrarOfClaimDomain(
      registrarOfClaimDomain_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startingMetadataIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    stopSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalForSale(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    zNSHub(overrides?: CallOverrides): Promise<[string]>;
  };

  __ClaimWithChildSale_init(
    newDomainParentId_: BigNumberish,
    price_: BigNumberish,
    zNSHub_: string,
    sellerWallet_: string,
    saleDuration_: BigNumberish,
    startingMetadataIndex_: BigNumberish,
    baseFolderHash_: string,
    totalForSale_: BigNumberish,
    registrarOfClaimDomain_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  baseFolderHash(overrides?: CallOverrides): Promise<string>;

  claimDomains(
    claimingIds: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimingParentId(overrides?: CallOverrides): Promise<BigNumber>;

  domainsClaimedWithBy(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  domainsSold(overrides?: CallOverrides): Promise<BigNumber>;

  getNftByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  newDomainParentId(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  registrarOfClaimDomain(overrides?: CallOverrides): Promise<string>;

  releaseDomain(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  saleDuration(overrides?: CallOverrides): Promise<BigNumber>;

  salePrice(overrides?: CallOverrides): Promise<BigNumber>;

  saleStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

  saleStarted(overrides?: CallOverrides): Promise<boolean>;

  sellerWallet(overrides?: CallOverrides): Promise<string>;

  setAmountOfDomainsForSale(
    forSale: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseFolderHash(
    folderHash_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setClaimingParentId(
    parentId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHub(
    zNSHub_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNewDomainParentId(
    parentId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPauseStatus(
    pauseStatus: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSaleDuration(
    durationInBlocks: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSalePrice(
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSellerWallet(
    wallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStartIndex(
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setregistrarOfClaimDomain(
    registrarOfClaimDomain_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startSale(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startingMetadataIndex(overrides?: CallOverrides): Promise<BigNumber>;

  stopSale(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalForSale(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  zNSHub(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    __ClaimWithChildSale_init(
      newDomainParentId_: BigNumberish,
      price_: BigNumberish,
      zNSHub_: string,
      sellerWallet_: string,
      saleDuration_: BigNumberish,
      startingMetadataIndex_: BigNumberish,
      baseFolderHash_: string,
      totalForSale_: BigNumberish,
      registrarOfClaimDomain_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    baseFolderHash(overrides?: CallOverrides): Promise<string>;

    claimDomains(
      claimingIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimingParentId(overrides?: CallOverrides): Promise<BigNumber>;

    domainsClaimedWithBy(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    domainsSold(overrides?: CallOverrides): Promise<BigNumber>;

    getNftByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    newDomainParentId(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    registrarOfClaimDomain(overrides?: CallOverrides): Promise<string>;

    releaseDomain(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    saleDuration(overrides?: CallOverrides): Promise<BigNumber>;

    salePrice(overrides?: CallOverrides): Promise<BigNumber>;

    saleStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

    saleStarted(overrides?: CallOverrides): Promise<boolean>;

    sellerWallet(overrides?: CallOverrides): Promise<string>;

    setAmountOfDomainsForSale(
      forSale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseFolderHash(
      folderHash_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setClaimingParentId(
      parentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setHub(zNSHub_: string, overrides?: CallOverrides): Promise<void>;

    setNewDomainParentId(
      parentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPauseStatus(
      pauseStatus: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setSaleDuration(
      durationInBlocks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSalePrice(price: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setSellerWallet(wallet: string, overrides?: CallOverrides): Promise<void>;

    setStartIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setregistrarOfClaimDomain(
      registrarOfClaimDomain_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    startSale(overrides?: CallOverrides): Promise<void>;

    startingMetadataIndex(overrides?: CallOverrides): Promise<BigNumber>;

    stopSale(overrides?: CallOverrides): Promise<void>;

    totalForSale(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    zNSHub(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "RefundedEther(address,uint256)"(
      buyer?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { buyer: string; amount: BigNumber }
    >;

    RefundedEther(
      buyer?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { buyer: string; amount: BigNumber }
    >;

    "SaleStarted(uint256)"(
      block?: null
    ): TypedEventFilter<[BigNumber], { block: BigNumber }>;

    SaleStarted(
      block?: null
    ): TypedEventFilter<[BigNumber], { block: BigNumber }>;
  };

  estimateGas: {
    __ClaimWithChildSale_init(
      newDomainParentId_: BigNumberish,
      price_: BigNumberish,
      zNSHub_: string,
      sellerWallet_: string,
      saleDuration_: BigNumberish,
      startingMetadataIndex_: BigNumberish,
      baseFolderHash_: string,
      totalForSale_: BigNumberish,
      registrarOfClaimDomain_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    baseFolderHash(overrides?: CallOverrides): Promise<BigNumber>;

    claimDomains(
      claimingIds: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimingParentId(overrides?: CallOverrides): Promise<BigNumber>;

    domainsClaimedWithBy(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    domainsSold(overrides?: CallOverrides): Promise<BigNumber>;

    getNftByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newDomainParentId(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    registrarOfClaimDomain(overrides?: CallOverrides): Promise<BigNumber>;

    releaseDomain(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    saleDuration(overrides?: CallOverrides): Promise<BigNumber>;

    salePrice(overrides?: CallOverrides): Promise<BigNumber>;

    saleStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

    saleStarted(overrides?: CallOverrides): Promise<BigNumber>;

    sellerWallet(overrides?: CallOverrides): Promise<BigNumber>;

    setAmountOfDomainsForSale(
      forSale: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseFolderHash(
      folderHash_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setClaimingParentId(
      parentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHub(
      zNSHub_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNewDomainParentId(
      parentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPauseStatus(
      pauseStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSaleDuration(
      durationInBlocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSalePrice(
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSellerWallet(
      wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStartIndex(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setregistrarOfClaimDomain(
      registrarOfClaimDomain_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startingMetadataIndex(overrides?: CallOverrides): Promise<BigNumber>;

    stopSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalForSale(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    zNSHub(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    __ClaimWithChildSale_init(
      newDomainParentId_: BigNumberish,
      price_: BigNumberish,
      zNSHub_: string,
      sellerWallet_: string,
      saleDuration_: BigNumberish,
      startingMetadataIndex_: BigNumberish,
      baseFolderHash_: string,
      totalForSale_: BigNumberish,
      registrarOfClaimDomain_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    baseFolderHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimDomains(
      claimingIds: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimingParentId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    domainsClaimedWithBy(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    domainsSold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNftByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newDomainParentId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registrarOfClaimDomain(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    releaseDomain(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    saleDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    salePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    saleStartBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    saleStarted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellerWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAmountOfDomainsForSale(
      forSale: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseFolderHash(
      folderHash_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setClaimingParentId(
      parentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHub(
      zNSHub_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNewDomainParentId(
      parentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPauseStatus(
      pauseStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSaleDuration(
      durationInBlocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSalePrice(
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSellerWallet(
      wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStartIndex(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setregistrarOfClaimDomain(
      registrarOfClaimDomain_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startingMetadataIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stopSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalForSale(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    zNSHub(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
